// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String?             @unique
  name              String? 
  number            String              @unique
  password          String
  OnRampTransaction OnRampTransaction[]
  Balance           Balance[]
  sentTransfers     p2pTransfer[]       @relation(name: "FromUserRelation")
  receivedTransfers p2pTransfer[]       @relation(name: "ToUserRelation")
  sessions          Session[]
  auditlog          AuditLog[]
}

model Merchant {
  id          Int     @id @default(autoincrement())
  email       String  @unique
  name        String?
  auth_type   AuthType   
}

model p2pTransfer {
  id         Int          @id @default(autoincrement())
  amount     Int
  timestamp  DateTime
  status     OnRampStatus?
  fromUserId Int
  fromUser   User         @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId   Int
  toUser     User         @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
}

model OnRampTransaction {
  id            Int              @id @default(autoincrement())
  status        OnRampStatus
  token         String
  provider      String
  amount        Int
  startTime     DateTime
  userId        Int
  user          User            @relation(fields:[userId], references: [id])
}

model Balance {
  id            Int              @id @default(autoincrement())
  amount        Int
  locked        Int
  userId        Int
  user          User            @relation(fields:[userId], references: [id])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  details   Json
  timestamp DateTime @default(now())
  ipAddress String?
  user      User     @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  userId       Int
  deviceInfo   String?
  ipAddress    String?
  expiresAt    DateTime
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}

enum AuthType {
  Google
  Github
}

enum OnRampStatus {
  Pending
  Completed
  Failed
}